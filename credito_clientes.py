# -*- coding: utf-8 -*-
"""Copia de Regresion_Logistica_UdeA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jdxJHbsdRUq_VBzZHOeyEQ-wO3jp54ia

# **Regresión Logistica**

## Importar el modelo y demas librerias
"""

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

df = pd.read_csv("/content/credito_clientes_RLogistic.csv")
df.info()

"""Transformación y separación"""

le = LabelEncoder()
df['historial_credito'] = le.fit_transform(df['historial_credito'])
print(df['historial_credito'])

X = df.drop('pagara_credito', axis=1)
y = df['pagara_credito']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"Tamañao de datos de entrenamiento X:{X_train.shape} - y:{y_train.shape}")
print(f"Tamaño de datos de prueba X:{X_test.shape} - y:{y_test.shape}")

"""## Crear una instancia del modelo"""

modelo = LogisticRegression()

"""## Entrenar el modelo con los datos"""

modelo.fit(X_train, y_train)

"""## Realizar predicciones"""

y_pred = modelo.predict(X_test)
y_prob = modelo.predict_proba(X_test)[:,1]

predicciones_df = X_test.copy()
predicciones_df['real'] = y_test.values
predicciones_df['predicho'] = y_pred
predicciones_df['propabilidad'] = y_prob

predicciones_df.head(10)

matriz = confusion_matrix(y_test, y_pred)

plt.figure(figsize=(6, 5))
sns.heatmap(matriz, annot=True, fmt='d', cmap='Blues',
            xticklabels=['No pagará', 'Pagará'], yticklabels=['No pagará', 'Pagará'])
plt.xlabel('Predicción')
plt.ylabel('Real')
plt.title('Matriz de confusión - Regresión logística')
plt.tight_layout()
plt.show()

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

accuracy, precision, recall, f1